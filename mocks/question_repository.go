// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	entity "challenge/internal/entity"
	context "context"

	gorm "gorm.io/gorm"

	gormprovider "challenge/pkg/gormprovider"

	mock "github.com/stretchr/testify/mock"
)

// QuestionRepository is an autogenerated mock type for the QuestionRepository type
type QuestionRepository struct {
	mock.Mock
}

// CreateQuestion provides a mock function with given fields: ctx, question
func (_m *QuestionRepository) CreateQuestion(ctx context.Context, question *entity.Question) error {
	ret := _m.Called(ctx, question)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Question) error); ok {
		r0 = rf(ctx, question)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteQuestion provides a mock function with given fields: ctx, id
func (_m *QuestionRepository) DeleteQuestion(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetQuestion provides a mock function with given fields: ctx, id
func (_m *QuestionRepository) GetQuestion(ctx context.Context, id uint) (entity.Question, error) {
	ret := _m.Called(ctx, id)

	var r0 entity.Question
	if rf, ok := ret.Get(0).(func(context.Context, uint) entity.Question); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Question)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQuestions provides a mock function with given fields: ctx, pageSize, lastId, opts
func (_m *QuestionRepository) ListQuestions(ctx context.Context, pageSize uint, lastId *uint, opts ...gormprovider.Option) ([]entity.Question, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, pageSize, lastId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []entity.Question
	if rf, ok := ret.Get(0).(func(context.Context, uint, *uint, ...gormprovider.Option) []entity.Question); ok {
		r0 = rf(ctx, pageSize, lastId, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, *uint, ...gormprovider.Option) error); ok {
		r1 = rf(ctx, pageSize, lastId, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewQuery provides a mock function with given fields: ctx
func (_m *QuestionRepository) NewQuery(ctx context.Context) *gorm.DB {
	ret := _m.Called(ctx)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(context.Context) *gorm.DB); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// RunInTransaction provides a mock function with given fields: ctx, fn
func (_m *QuestionRepository) RunInTransaction(ctx context.Context, fn func(context.Context) error) error {
	ret := _m.Called(ctx, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateQuestion provides a mock function with given fields: ctx, id, question
func (_m *QuestionRepository) UpdateQuestion(ctx context.Context, id uint, question *entity.Question) error {
	ret := _m.Called(ctx, id, question)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, *entity.Question) error); ok {
		r0 = rf(ctx, id, question)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewQuestionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewQuestionRepository creates a new instance of QuestionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQuestionRepository(t mockConstructorTestingTNewQuestionRepository) *QuestionRepository {
	mock := &QuestionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
