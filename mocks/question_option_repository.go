// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	entity "challenge/internal/entity"
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// QuestionOptionRepository is an autogenerated mock type for the QuestionOptionRepository type
type QuestionOptionRepository struct {
	mock.Mock
}

// BulkCreateQuestionOptions provides a mock function with given fields: ctx, questionId, questionOptions
func (_m *QuestionOptionRepository) BulkCreateQuestionOptions(ctx context.Context, questionId uint, questionOptions []entity.QuestionOption) error {
	ret := _m.Called(ctx, questionId, questionOptions)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, []entity.QuestionOption) error); ok {
		r0 = rf(ctx, questionId, questionOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkReplaceQuestionOptions provides a mock function with given fields: ctx, questionId, questionOptions
func (_m *QuestionOptionRepository) BulkReplaceQuestionOptions(ctx context.Context, questionId uint, questionOptions []entity.QuestionOption) error {
	ret := _m.Called(ctx, questionId, questionOptions)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, []entity.QuestionOption) error); ok {
		r0 = rf(ctx, questionId, questionOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQuery provides a mock function with given fields: ctx
func (_m *QuestionOptionRepository) NewQuery(ctx context.Context) *gorm.DB {
	ret := _m.Called(ctx)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(context.Context) *gorm.DB); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// RunInTransaction provides a mock function with given fields: ctx, fn
func (_m *QuestionOptionRepository) RunInTransaction(ctx context.Context, fn func(context.Context) error) error {
	ret := _m.Called(ctx, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewQuestionOptionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewQuestionOptionRepository creates a new instance of QuestionOptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQuestionOptionRepository(t mockConstructorTestingTNewQuestionOptionRepository) *QuestionOptionRepository {
	mock := &QuestionOptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
